/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.askcuix.push.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-27")
public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("osType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NOTIFY_SYS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifySysType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NOTIFY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PUSH_SYS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pushSysType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PUSH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pushId", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoTupleSchemeFactory());
  }

  public String uid; // required
  /**
   * 
   * @see OsType
   */
  public OsType osType; // required
  /**
   * 
   * @see PushSysType
   */
  public PushSysType notifySysType; // required
  public String notifyId; // required
  /**
   * 
   * @see PushSysType
   */
  public PushSysType pushSysType; // required
  public String pushId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    /**
     * 
     * @see OsType
     */
    OS_TYPE((short)2, "osType"),
    /**
     * 
     * @see PushSysType
     */
    NOTIFY_SYS_TYPE((short)3, "notifySysType"),
    NOTIFY_ID((short)4, "notifyId"),
    /**
     * 
     * @see PushSysType
     */
    PUSH_SYS_TYPE((short)5, "pushSysType"),
    PUSH_ID((short)6, "pushId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // OS_TYPE
          return OS_TYPE;
        case 3: // NOTIFY_SYS_TYPE
          return NOTIFY_SYS_TYPE;
        case 4: // NOTIFY_ID
          return NOTIFY_ID;
        case 5: // PUSH_SYS_TYPE
          return PUSH_SYS_TYPE;
        case 6: // PUSH_ID
          return PUSH_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("osType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OsType.class)));
    tmpMap.put(_Fields.NOTIFY_SYS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("notifySysType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PushSysType.class)));
    tmpMap.put(_Fields.NOTIFY_ID, new org.apache.thrift.meta_data.FieldMetaData("notifyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUSH_SYS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("pushSysType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PushSysType.class)));
    tmpMap.put(_Fields.PUSH_ID, new org.apache.thrift.meta_data.FieldMetaData("pushId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
  }

  public UserInfo(
    String uid,
    OsType osType,
    PushSysType notifySysType,
    String notifyId,
    PushSysType pushSysType,
    String pushId)
  {
    this();
    this.uid = uid;
    this.osType = osType;
    this.notifySysType = notifySysType;
    this.notifyId = notifyId;
    this.pushSysType = pushSysType;
    this.pushId = pushId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetOsType()) {
      this.osType = other.osType;
    }
    if (other.isSetNotifySysType()) {
      this.notifySysType = other.notifySysType;
    }
    if (other.isSetNotifyId()) {
      this.notifyId = other.notifyId;
    }
    if (other.isSetPushSysType()) {
      this.pushSysType = other.pushSysType;
    }
    if (other.isSetPushId()) {
      this.pushId = other.pushId;
    }
  }

  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.osType = null;
    this.notifySysType = null;
    this.notifyId = null;
    this.pushSysType = null;
    this.pushId = null;
  }

  public String getUid() {
    return this.uid;
  }

  public UserInfo setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  /**
   * 
   * @see OsType
   */
  public OsType getOsType() {
    return this.osType;
  }

  /**
   * 
   * @see OsType
   */
  public UserInfo setOsType(OsType osType) {
    this.osType = osType;
    return this;
  }

  public void unsetOsType() {
    this.osType = null;
  }

  /** Returns true if field osType is set (has been assigned a value) and false otherwise */
  public boolean isSetOsType() {
    return this.osType != null;
  }

  public void setOsTypeIsSet(boolean value) {
    if (!value) {
      this.osType = null;
    }
  }

  /**
   * 
   * @see PushSysType
   */
  public PushSysType getNotifySysType() {
    return this.notifySysType;
  }

  /**
   * 
   * @see PushSysType
   */
  public UserInfo setNotifySysType(PushSysType notifySysType) {
    this.notifySysType = notifySysType;
    return this;
  }

  public void unsetNotifySysType() {
    this.notifySysType = null;
  }

  /** Returns true if field notifySysType is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifySysType() {
    return this.notifySysType != null;
  }

  public void setNotifySysTypeIsSet(boolean value) {
    if (!value) {
      this.notifySysType = null;
    }
  }

  public String getNotifyId() {
    return this.notifyId;
  }

  public UserInfo setNotifyId(String notifyId) {
    this.notifyId = notifyId;
    return this;
  }

  public void unsetNotifyId() {
    this.notifyId = null;
  }

  /** Returns true if field notifyId is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyId() {
    return this.notifyId != null;
  }

  public void setNotifyIdIsSet(boolean value) {
    if (!value) {
      this.notifyId = null;
    }
  }

  /**
   * 
   * @see PushSysType
   */
  public PushSysType getPushSysType() {
    return this.pushSysType;
  }

  /**
   * 
   * @see PushSysType
   */
  public UserInfo setPushSysType(PushSysType pushSysType) {
    this.pushSysType = pushSysType;
    return this;
  }

  public void unsetPushSysType() {
    this.pushSysType = null;
  }

  /** Returns true if field pushSysType is set (has been assigned a value) and false otherwise */
  public boolean isSetPushSysType() {
    return this.pushSysType != null;
  }

  public void setPushSysTypeIsSet(boolean value) {
    if (!value) {
      this.pushSysType = null;
    }
  }

  public String getPushId() {
    return this.pushId;
  }

  public UserInfo setPushId(String pushId) {
    this.pushId = pushId;
    return this;
  }

  public void unsetPushId() {
    this.pushId = null;
  }

  /** Returns true if field pushId is set (has been assigned a value) and false otherwise */
  public boolean isSetPushId() {
    return this.pushId != null;
  }

  public void setPushIdIsSet(boolean value) {
    if (!value) {
      this.pushId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case OS_TYPE:
      if (value == null) {
        unsetOsType();
      } else {
        setOsType((OsType)value);
      }
      break;

    case NOTIFY_SYS_TYPE:
      if (value == null) {
        unsetNotifySysType();
      } else {
        setNotifySysType((PushSysType)value);
      }
      break;

    case NOTIFY_ID:
      if (value == null) {
        unsetNotifyId();
      } else {
        setNotifyId((String)value);
      }
      break;

    case PUSH_SYS_TYPE:
      if (value == null) {
        unsetPushSysType();
      } else {
        setPushSysType((PushSysType)value);
      }
      break;

    case PUSH_ID:
      if (value == null) {
        unsetPushId();
      } else {
        setPushId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case OS_TYPE:
      return getOsType();

    case NOTIFY_SYS_TYPE:
      return getNotifySysType();

    case NOTIFY_ID:
      return getNotifyId();

    case PUSH_SYS_TYPE:
      return getPushSysType();

    case PUSH_ID:
      return getPushId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case OS_TYPE:
      return isSetOsType();
    case NOTIFY_SYS_TYPE:
      return isSetNotifySysType();
    case NOTIFY_ID:
      return isSetNotifyId();
    case PUSH_SYS_TYPE:
      return isSetPushSysType();
    case PUSH_ID:
      return isSetPushId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_osType = true && this.isSetOsType();
    boolean that_present_osType = true && that.isSetOsType();
    if (this_present_osType || that_present_osType) {
      if (!(this_present_osType && that_present_osType))
        return false;
      if (!this.osType.equals(that.osType))
        return false;
    }

    boolean this_present_notifySysType = true && this.isSetNotifySysType();
    boolean that_present_notifySysType = true && that.isSetNotifySysType();
    if (this_present_notifySysType || that_present_notifySysType) {
      if (!(this_present_notifySysType && that_present_notifySysType))
        return false;
      if (!this.notifySysType.equals(that.notifySysType))
        return false;
    }

    boolean this_present_notifyId = true && this.isSetNotifyId();
    boolean that_present_notifyId = true && that.isSetNotifyId();
    if (this_present_notifyId || that_present_notifyId) {
      if (!(this_present_notifyId && that_present_notifyId))
        return false;
      if (!this.notifyId.equals(that.notifyId))
        return false;
    }

    boolean this_present_pushSysType = true && this.isSetPushSysType();
    boolean that_present_pushSysType = true && that.isSetPushSysType();
    if (this_present_pushSysType || that_present_pushSysType) {
      if (!(this_present_pushSysType && that_present_pushSysType))
        return false;
      if (!this.pushSysType.equals(that.pushSysType))
        return false;
    }

    boolean this_present_pushId = true && this.isSetPushId();
    boolean that_present_pushId = true && that.isSetPushId();
    if (this_present_pushId || that_present_pushId) {
      if (!(this_present_pushId && that_present_pushId))
        return false;
      if (!this.pushId.equals(that.pushId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_osType = true && (isSetOsType());
    list.add(present_osType);
    if (present_osType)
      list.add(osType.getValue());

    boolean present_notifySysType = true && (isSetNotifySysType());
    list.add(present_notifySysType);
    if (present_notifySysType)
      list.add(notifySysType.getValue());

    boolean present_notifyId = true && (isSetNotifyId());
    list.add(present_notifyId);
    if (present_notifyId)
      list.add(notifyId);

    boolean present_pushSysType = true && (isSetPushSysType());
    list.add(present_pushSysType);
    if (present_pushSysType)
      list.add(pushSysType.getValue());

    boolean present_pushId = true && (isSetPushId());
    list.add(present_pushId);
    if (present_pushId)
      list.add(pushId);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsType()).compareTo(other.isSetOsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osType, other.osType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifySysType()).compareTo(other.isSetNotifySysType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifySysType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifySysType, other.notifySysType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyId()).compareTo(other.isSetNotifyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyId, other.notifyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushSysType()).compareTo(other.isSetPushSysType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushSysType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushSysType, other.pushSysType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushId()).compareTo(other.isSetPushId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushId, other.pushId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfo(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osType:");
    if (this.osType == null) {
      sb.append("null");
    } else {
      sb.append(this.osType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifySysType:");
    if (this.notifySysType == null) {
      sb.append("null");
    } else {
      sb.append(this.notifySysType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyId:");
    if (this.notifyId == null) {
      sb.append("null");
    } else {
      sb.append(this.notifyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushSysType:");
    if (this.pushSysType == null) {
      sb.append("null");
    } else {
      sb.append(this.pushSysType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushId:");
    if (this.pushId == null) {
      sb.append("null");
    } else {
      sb.append(this.pushId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoStandardSchemeFactory implements SchemeFactory {
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends StandardScheme<UserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.osType = io.askcuix.push.thrift.OsType.findByValue(iprot.readI32());
              struct.setOsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTIFY_SYS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notifySysType = io.askcuix.push.thrift.PushSysType.findByValue(iprot.readI32());
              struct.setNotifySysTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOTIFY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyId = iprot.readString();
              struct.setNotifyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PUSH_SYS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pushSysType = io.askcuix.push.thrift.PushSysType.findByValue(iprot.readI32());
              struct.setPushSysTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUSH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pushId = iprot.readString();
              struct.setPushIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.osType != null) {
        oprot.writeFieldBegin(OS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.osType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.notifySysType != null) {
        oprot.writeFieldBegin(NOTIFY_SYS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.notifySysType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.notifyId != null) {
        oprot.writeFieldBegin(NOTIFY_ID_FIELD_DESC);
        oprot.writeString(struct.notifyId);
        oprot.writeFieldEnd();
      }
      if (struct.pushSysType != null) {
        oprot.writeFieldBegin(PUSH_SYS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.pushSysType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.pushId != null) {
        oprot.writeFieldBegin(PUSH_ID_FIELD_DESC);
        oprot.writeString(struct.pushId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements SchemeFactory {
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends TupleScheme<UserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uid);
      BitSet optionals = new BitSet();
      if (struct.isSetOsType()) {
        optionals.set(0);
      }
      if (struct.isSetNotifySysType()) {
        optionals.set(1);
      }
      if (struct.isSetNotifyId()) {
        optionals.set(2);
      }
      if (struct.isSetPushSysType()) {
        optionals.set(3);
      }
      if (struct.isSetPushId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOsType()) {
        oprot.writeI32(struct.osType.getValue());
      }
      if (struct.isSetNotifySysType()) {
        oprot.writeI32(struct.notifySysType.getValue());
      }
      if (struct.isSetNotifyId()) {
        oprot.writeString(struct.notifyId);
      }
      if (struct.isSetPushSysType()) {
        oprot.writeI32(struct.pushSysType.getValue());
      }
      if (struct.isSetPushId()) {
        oprot.writeString(struct.pushId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.osType = io.askcuix.push.thrift.OsType.findByValue(iprot.readI32());
        struct.setOsTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.notifySysType = io.askcuix.push.thrift.PushSysType.findByValue(iprot.readI32());
        struct.setNotifySysTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notifyId = iprot.readString();
        struct.setNotifyIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pushSysType = io.askcuix.push.thrift.PushSysType.findByValue(iprot.readI32());
        struct.setPushSysTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pushId = iprot.readString();
        struct.setPushIdIsSet(true);
      }
    }
  }

}

